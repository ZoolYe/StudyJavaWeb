<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
    注意：使用mapper代理方法开发，namespace有特殊重要作用，
    namespace等于mapper接口的地址
 -->
<mapper namespace="zool.mybatis.mapper.UserMapper">

    <!-- 在映射文件中配置很多sql语句 -->
    <!-- 通过select执行数据库查询 -->
    <!-- id：标识映射文件中的sql称为statement的id
        将sql语句封装到mappedtatement对象中
        #{}表示一个占位符
        parameterType:指定输入参数的类型
        #{id}:其中id表示接受输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或其它都可以
        resultType:指定sql输出结果的所映射的java对象类型,select指定resultType表示将单条记录映射成的java对象
     -->
    <select id="findUserById" parameterType="int" resultType="zool.pojo.User">
      select * from user where id = #{id}
    </select>

    <!-- 根据用户名称模糊查询用户信息 resultType表示将单条记录映射成的java对象
        ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
        使用${}拼接sql，可能会引起sql注入
        ${value}：接收输入参数的内容,如果传入的类型是简单类型,${}中只能使用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="zool.pojo.User">
        select * from user where username like '%${value}%'
  </select>

    <!-- 添加用户
        parameterType:指定输入参数类型pojo
        #{}中指定pojo的属性名
     -->

    <insert id="insertUser" parameterType="zool.pojo.User">
        <!-- 将插入数据的主键返回，返回到user对象中
            SELECT LAST_INSERT_ID():得到刚刚insert进去记录的主键值，只适用于自增主键
            keyProperty：将查询到的主键值设置到parameterType指定的对象的哪个属性
            order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
            resultType:指定SELECT LAST_INSERT_ID()的结果类型
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
          SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user (username,password,name,sex,country,province,city,area,street,address,provincialcertificate) values(#{username},#{password},#{name},#{sex},#{country},#{province},#{city},#{area},#{street},#{address},#{provincialcertificate})

        <!--
            使用mysql的uuid()生成主键
            执行过程：
            首先通过UUID()得到主键，将主键设置到user对象的id属性中
            其次insert执行时，从user对象中取出id属性值
        -->
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="string">
            SELECT UUID()
        </selectKey>
        insert into user (id,username,password,name,sex,country,province,city,area,street,address,provincialcertificate) values(#{id},#{username},#{password},#{name},#{sex},#{country},#{province},#{city},#{area},#{street},#{address},#{provincialcertificate})-->
    </insert>

    <!-- 删除用户
        根据id删除用户，需要输入id值
     -->
    <delete id="deleteUser" parameterType="int">
      delete from user where id = #{id}
    </delete>

    <!-- 根据id更新用户
        分析：需要传入用户的id
        需要传入用户的更新信息
        parameterType指定user对象，包括id和更新的信息
        注意：id是必须存在
        #{id}:从输入的user对象中获取id的属性值
     -->
    <update id="updateUser" parameterType="zool.pojo.User">
      update user
      set id = #{id},
      username = #{username},
      password = #{password},
      name = #{name},
      sex = #{sex},
      country = #{country},
      province = #{province},
      city = #{city},
      area = #{area},
      street = #{street},
      address = #{address},
      provincialcertificate = #{provincialcertificate}
      where id = #{id}
    </update>

</mapper>